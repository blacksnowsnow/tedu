
一、搭建数据库服务器
二、
六、数据备份与恢复
七、mysql主从同步
八、数据读写分离
九、部署mysql集群
十、mysql调优
十一、mysql试图 和存储过程
十二、非关系型数据库服务的使用：redis 和 mongodb









mysql数据库管理day01
工作邮箱 panglj@tedu.cn 庞丽静

数据库使用：购物网站、游戏网站、金融网站、博客
数据存储的数据：帐号信息、对应的数据信息
数据库软件（开源）：mysql、mariadb、mongodb、redis
数据库软件（商业）：oracle、db2、SQL SERVER（微软）
软件平台：Linux、Unix、Windows
软件包软件：官网下载

mysql软件：
	关系型数据型软件，要按照一定组织机构存储数据，并且数据和数据之间可以互相关联操作
	跨平台 Linux Unix Widows
	可移植性强
	支持多种语言Python、Java、Perl、PHP
	生产环境中，数据服务和网站服务一起使用
	mysql软件包封包类型：rpm包 源码包 可以自定义安装信息

非关系型数据型软件（NoSQL） mongodb、redis、memcached

1.搭建数据库服务器  192.168.4.51

-装包
1.1 删除系统自带的mariadb软件
rpm -qa |grep -i mariadb
rpm -e --nodeps mariadb-server mariadb（忽略依赖关系）
1.2安装mysql软件  mysql-5.7.17-1.el7.x86_64.rmp-bundle.tar
rm -rf mysql-community-server-minimal-5.7.17-1.el7.x86_64.rpm
yum -y install perl-JSON
rpm -Uvh mysql-community-*.rpm

——启动服务
systemctl start mysqld
systemctl enable mysqld


——查看服务进程和端口号
ss -natlp |grep mysql
LISTEN     0      80          :::3306                    :::*                   users:(("mysqld",pid=3317,fd=22)
日志文件 /var/log/mysqld.log
配置文件 /etc/my.cnf

2.数据库服务的基本使用

2.1 使用初始密码在本机连接数据库服务
mysql -h 数据库服务器IP地址 -u 用户名 -p 密码 库名（可省略）
cat /var/log/mysqld.log  |grep password (查看数据库初始密码)
mysql -hlocalhost -uroot -p'9lqZc<+af1;n' (密码有特殊符号要用‘’)

2.2 重置本机连接密码
临时配置密码验证策略
> set global validate_password_policy=0(0表示策略不开启，只检查密码的长度)
> set global validate_password_length=6（密码长度不能少于6个字符）

永久生效
vim /etc/my.cnf
[mtsqld]
validate_password_policy=0
validate_password_length=6

systemctl restart mysqld

> alter user root@'localhost' identified by '密码'；

2.3 把数据存储在数据库服务器上的过程
连接数据库服务器（命令行 API 图形工具）
选择库（存放数据的文件夹）
选择表 （就是文件）
插入记录 （）

2.4 sql命令分类
DDL DML DTL DCL

2.5 sql命令使用规则


2.6 管理数据库的sql命令 及 库名的命名规则
——查看 show databases;
——创建 create database 库名；
——切换 use 库名；
——删除 drop database 库名；
——显示当前所在的库 select database();



2.7 管理表的sql命令
——查看 show tables;
——建表 create table 库名.表名（ 字段名 类型（宽度），
> create table gamedb.sutuinfo(name char（10），addr char(20));

——删除 drop table 库名.表名；
——查看表记录 select * from 库名.表名；
——查看表结构 desc 库名表名；

2.8 管理记录的sql命令
——查看 select * from 库名.表名；

——插入 insert into 库名，表名 values （“bobo”，“beijing”） 
> insert into gamedb.stuinfo values("tom","beijing");
> insert into gamedb.stuinfo values("bobo","beijing");

——修改 update 库名.表名 set 字段名=值 where 条件;
update gamedb.stuinfo set addr="shanghai"  where name="tom";

——删除表记录 delete from 库名.表名；
> delete from game.stuinfo;
> delete from game.stuinfo where name='jian';

######################################################################

3.mysql数据类型
3.1 数值类型 （成绩 年龄 工资）
每种类型 的存储数据的范围都是固定
整数类型  （只能存存储整数）
   微小整型（TINYINT） 小整型（SMALLINT） 中整型（MEDIUMINT） 大整型（INT） 极大整型（BIGINT）
   小数会四舍五入，大于类型会错误
unsigned 使用数值类型有符号的范围


> create talbe gamedb.t1 (level tint,age smallint);

浮点型 （存储小数）
float (M,N)  
double (M,N) 99999.99 - (-99999.99)
M 设置总位数
N 设置小数位位数

> create talbe gamedb.t2 (pay float(5,2));

3.2字符类型 （商品名称 籍贯 姓名 生产厂家）
char (255、不写默认为1)    固定长度字符类型（自己补齐，空间占用大）
varchar(65532、不写会报错) 变长字符类型（CPU运算数入的字符长度，耗费资源会）

大文本类型（音频文件、视频文件、图片文件）
blob、text

> create table t3 (name char(4),address varchar(10));
> insert into t3 ("jian","beijing");

3.3日期时间类型 （注册时间 约会时间 开会时间 入职时间 生日）

年 		year YYYY 			2018
日期 		date YYYYMMDD		20180423
时间 		time HHMMSS			161958
日期时间类型	datetime、timestamp
		YYYYMMDDHHMMSS		20180423161958
datetime 1000-01-01 ~ 9999-12-31 23:59:59 （默认赋值为NULL）
timestamp 1970-01-01 2038-01-19 03:14:07.999999 (没赋值时，自动以当前系统时间赋值)

获取日期时间给对应的日期时间类型的字段赋值
获取日期时间函数
now（）获取当前系统的时间
year（日期时间）获取指定时间中的年 1901-2155
month() 月份
获取指定现在系统时间
> select now();

> select year(now());

> select month（now（）） （日期时间）；

> select date （now（））;

获取自定义日期时间的time
> select time (日期时间)

可以使用2位数字给year类型
> insert into t6(name,start_time) values ("tom",1966);


3.4枚举类型（插入记录 时 记录的值在列举的范围内选择）
		性别 爱好

> create TABLE t8 （
name varchar（8），
sex enum（“boy”，“girl”，“no”），
likes  set（“woman”，“game”，“money”，“flim”，“eat”））；

> insert into t8 values ("xieyouyue",3,"money,eat");

##############################################################################
数值类型的宽度是显示宽度，不能够给字段赋值的大小，不够位数自动补位
>create table t2 (age int(3) zerofill);     #zerofill 自动补齐
##############################################################################

mysql -day02
1.字段约束条件
1.1作用：限制如何给字段赋值的
1.2包括内容有： NULL Key Default Extra
NULL 是否允许给字段赋null值 默认允许赋null值
	null	默认允许赋null值
	not null 不允许赋null值
key	键值类型：普通

Default 默认值作用：当不被字段赋值时，使用默认值给字段赋值
	  不设置默认值是 系统定义的是null
	  default 值

Extra 额外设置，字段是否设置为自动增加

> create table t3 (name int(5) not null, classroom char(7) default "nsd1801",age tinyiny（2） unsigned zerofill default 18 ，sex enum（“boy”,"girl"）);

2.修改表结构
2.1修改表结构的命令    alter table 库. 表 执行动作；
>

——添加新字段 		add 字段 类型（宽度） 【约束条件】 【first、after 字段】
> alter table student add sex enum("boy","girl") default "girl";

——删除已有字段 		drop 字段名
> alter table student drop name ,drop age ;

——修改已有字段的类型宽度及约束条件  	modify 字段名 类型（宽度） 【约束条件】
########修改时不能与已经存储的数据矛盾的话不允许修改##########

> alter table student modify age tinyint(3) unsigned after name;
> alter table student modify name varchar(10)  not null;

——修改字段名 		change 源字段名 新字段名 类型（宽度） 【约束条件】
> alter table t1 change addrhome home char(10) default "beijing";

——修改表名 		alter table 源表名 rename  【to】 新表名；
> alter table t1 rename dogperson；

3.mysql键值
设置在表中字段上的，作用时约束如何给字段赋值，同时会给字段做索引

索引介绍：树形目录结构 类似于书的“目录”
优点：加快查询表记录的速度
缺点：减慢编辑表记录的速度，且占用磁盘的物理存储空间

DBA（数据库运维）
3.1键值类型：普通索引 唯一索引 全文索引 主键 外键 

3.1.1普通索引使用（index）
——使用规则
	一个表中可以有多个INDEX字段
	字段的值允许有重复，且可以赋NULL值
	经常把做查询条件的字段设置为INDEX字段
	INDEX字段的KEY标志时MUL

——查看  desc 表名；
show index from 表名；
> show index from t2\G;(\G每一行占一行显示)
 
 Table: t2
   Non_unique: 1
     Key_name: aaa
 Seq_in_index: 1
  Column_name: age
    Collation: A
  Cardinality: 2
         Null: YES
   Index_type: BTREE(二叉树)


创建
——在已有表创建   create index 索引名 on 表名 （字段）；
> create index aaa on t2(age);
	
——建表时创建  create talbe 表名( 字段列表，index（字段名），index（字段名）)；
> create table t21( classroom char(7) default "nsd1801" , name char(5) not null, age tinyint(2) zerofill unsigned, sex enum("boy","girl") default "boy", index(age), index(name),index(classroom) );

——删除 drop index 索引名 on 表名； .
> drop index aaa on t21;
   
                                                                                                                                                                                                                                                                      
3.1.2主键 primary ket
	一个表中只能有一个primary key 字段
	对应的字段值不允许有重复，且不允许赋null值
	如果有多个字段都作为PRIMARY KEY ，称为复合主键，必须一起创建
	主键字段的key标志是PRI
	通常与AUTO_INCREMENT连用
	经常把表中能够唯一标示记录的字段设置为主键字段

创建 
在已有表创建 alter table 表 add primary key(字段名)
> alter table t21 add stu_id char(9) first;
> alter talbe t21 add primary key(stu_id);

——建表时  create table 表名（字段列表，primary key（字段名））;/ 
	create table 表名 （字段 类型（宽度） primary key，。。。）；

>create table studb.t22 (person_id char(18) primary key,name char(5), age tinyint(2) )


——删除 alter table 表 drop primary key;
> alter talbe t22 drop primart key;

——复合主键使用
>create table t23(clientip char(15),port smallint(2),status enum("allow","deny"),primary key(clientip,port));

——主键primary key 通常和auto_increment连用，让字段的值自动增长i++(上个值+1)
> create table t26 (stu_id int(2) zerofill primary key auto_increment),
name char(10), age tinyint(2) unsigned,sex enum("boy","girl");

> insert into t26 (name,age,sex) values ("bob",21,"boy");

#####################################################################

3.1.3外键 （作用 限制如何给字段赋值的）
让当前表中字段赋值时，值只能在其他表的指定字段值的范围里选择

——使用规则
	表的存储引擎必须是innodb
	字段类型(type)要一致
	被参照字段必须要是索引类型的一种（primary key）

——准备一个references表
> create table jfb (fjb_id int(2) zerofill primary key auto_increment,name char(15), pay float(7,2))engine=innodb;

> insert into jfb(name,pay) values ("tom",26800);

——创建外键 foreign key 的命令格式：
create table 表（ 字段名列表，foreign key（字段名） references 表名（字段名）
on update cascade on delete cascade)engine=innodb；

> create table bjb(
bjb_id int(2) unsigned zerofill,
name char(15),
foreign key(bjb_id) references jfb(jfb_id) 
on update cascade  on delete cascade);

——更新(外键的内容会自己更新)
> update jfb set jfb_id=9 where name='bob';

——查看 desc 表名；(没用) show create table 表名;（）
> show create table bjb;

——删除外键 alter table 表名 drop forgign key 外键名；
> alter table bjb drop forgign key bjb_ibfk_1；

——在原有表创建外键（先删表，因为数据不符合外键规则）
> delete from bjb;
> alter table bjb add foreign key(bjb_id) references jfb(jfb_id)
on update cascade on delete cascade;

#############################################################
复制数据库，使用mysqldump及mysql的命令组合，一次性完成复制

#mysqldump db1 -u root -p123456 --add-drop-table | mysql newdb -u root -p123456
注意-p123456参数的写法：-p后面直接跟密码，中间没有空格)

以上是在同一台MySQL服务器上复制数据库的方法。如果要复制到远程另一台MySQL服务器上，可以使用mysql的“ -h 主机名/ip”参数。前提是mysql允许远程连接，且远程复制的传输效率和时间可以接受。

不在同一个mysql服务器上

#mysqldump db1 -uroot -p123456 --add-drop-table | mysql -h 192.168.1.22 newdb -u root -p123456

1.只复制表结构到新表

create TABLE test SELECT * FROM `user`where 1=2;主键,自增长等不会添加进去
或者 #CREATE TABLE test like `user`;没有数据,但是结构完全一样,推荐使用

2.复制表结构及数据到新表(结构不完整)

#create TABLE test SELECT * FROM `user`;有数据,但是主键,自增长等不会添加进去

3.复制旧表的数据到新表(假设两个表结构一样) 
#Insert INTO test SELECT * from user; test表必须先存在


#############################################################
mysql-day03

1、mysql存储引擎（innodb）
1.1存储引擎介绍：是mysql数据库软件自带的功能程序，
		  每种存储引擎的功能和数据存储方式也不同
		  存储引擎就处理表的处理器

——作为可插拔式的组件提供
	负责为数据库执行实际的数据I/O操作，不同的存储引擎，其存储数据的方式也不同
	用户通过连接器访问MySQL数据库，根据实际需要选用何种存储引擎，避免大的编码更改

1.2查看数据库服务支持的存储引擎有那些？
> show engines; 

1.3查看已有的表使用的存储引擎
> show create table 表名；

1.4修改数据库服务默认使用的存储引擎
# vim /etc/my.cnf
[mysqld]
default-storage-engine=myisam

# systemctl restart mysqld

1.5修改表使用的存储引擎，或建表时指定表使用的存储引擎
> create table 表（字段列表）engine=存储引擎名；
> alter table 表 engine=存储引擎名；

1.6常用存储引擎的特点
————innodb特点：
支持事务  、 事务回滚   、行级锁  、外键
存储方式： 一个表对应2个存储文件
                 表名.frm    表结构
                 表名.ibd    数据和索引


————myisam特点
不支持事物、事物回滚、外键
支持表级锁
存储方式：一个表对应3个存储文件
		表名.frm   表结构
		表名.MYD   数据
	 	表名.MYI   索引

——事物：对数据库服务的访问过程（连接数据库服务器 操作数据 断开连接）
——事物回滚：在事物执行过程中，任何一步操作失败，都会恢复之前的所有操作。
mysql数据库服务使用事物日志文件记录，对innodb存储引擎执行的sql操作
cd /var/lib/mysql
ib_logfile0 |
		|记录SQL命令
ib_logfile1 |

ibdata ————>数据源（sql命令执行后产生的数据信息）

——锁粒度：
	表级锁（myisam）给整张表加锁
	行级锁（innodb）只给表中当前被操作的行加锁
——锁的作用：解决对表的并发访问冲突问题。
		insert
		delete
——锁类型：
	读锁
	写锁


1.7建表时如何决定表使用那种存储引擎


1.8工作中怎么决定数据库服务器使用那种存储引擎
执行写操作多的表适合使用innodb存储引擎，可以并发访问
执行查操作多的表适合使用myisam存储引擎，可以节省系统资源


2、数据导入导出（批量操作数据）
2.1数据导入的命令格式及数据导入时的注意事项

——查看文件内容时，默认在系统的什么目录下搜索文件
> show variables like "secure_file_priv";
+--------------------------------+----------------------------------------+
| Variable_name    | Value                 |
+--------------------------------+----------------------------------------+
| secure_file_priv | /var/lib/mysql-files/ |
+--------------------------------+-----------------------------------------+

	################################
	#在mysql执行系统命令 system + 命令#
	################################

——修改导入文件系统默认的目录
# vim /etc/my.cnf
[mysqld]
secure_file_priv="/mysqldata"

# mkdir /mysqldata
# chown mysql /mysqldata
# setenforce 0
# systemctl restart mysqld


——数据导入：把系统文件的内容存储到数据库服务器的表里
# cp /etc/passwd /var/lib/mysql-files/


——创建存储数据表
> create table passwd(username  char(50),password char(1),uid int(2),git int(2),comment char(100),home char(50),shell char(50),index (username));
> desc db3.usertab;
> select * from db3.usertab;

——把系统已有用户的信息保存到db3库下的usertabd表里
> load data infile "目录/文件名" into table 库.表
fields terminated by "列间隔符号"
lines terminated by "\n"

> load data infile "/var/lib/mysql-files/passwd" into table db3.usertab
fields terminated by ":"
lines terminated by "\n"
> alter table db3.usertab add id int(2) first primary key auto_increment 

2.2数据导出的命令格式及数据导出时的注意事项
——数据导出：把表记录存储到系统文件里

> mysql查询命令  into outfile "目录名/文件名" 【fields terminated by "列间隔符"
lines terminated by "\n"】
> select username,uid from db2.usertab into outfile "/mysqldata/user1.txt" fields terminated by "###";


3、管理表记录
3.1插入记录 insert into （值要与字段类型和约束条件匹配）
——插入一条记录给所有字段赋值
> insert into 库.表 values(字段值列表)；

——插入N条记录给所有字段赋值
> insert into 库.表 values(字段值列表)，(字段值列表)；

——插入一条记录给指定的字段赋值
> insert into 库.表(字段名列表)  values(字段值列表)；

——插入N条记录给指定的字段赋值
> insert into 库.表(字段名列表)  values(字段值列表),(字段值列表)；

3.2查看记录
——查看表中所有行的所有字段的值
> select * from 库.表 ;

——查看表中所有行的指定字段的值
> select 字段名1，字段名2  from 库.表 ;

——查看指定行的指定字段的值
> select 字段名1，字段名N form 库.表 where 匹配条件；  

3.3修改记录 update 库.表 set 字段名=值，字段名=值 where 匹配条件；

——修改所有记录指定字段的值
> update 库.表 set 字段名=值，字段名=值；

——修改与条件匹配的记录指定字段的值
> update 库.表 set 字段名=值，字段名=值 where 匹配条件；

3.4删除记录
——删除表中指定的行
> delete from 库.表 where 条件；

4、匹配条件（select、update、delete记录时可以加条件）
——数值比较
=	!=	<	<= 	>	>=
> select * from usertab where id<=10;
——字符比较
——范围内比较
> 字段名 between 数字1 and 数字2；				 在..之间
> 字段名 in (值列表) (10,20,30) ("root","rsync")；		 在..里
> 字段名 not in (值列表)；						 不在..里
> select username,id  from usertab where id between 1 and 10;

——逻辑比较
逻辑与 and 		 多个条件同时成立，才匹配
逻辑或 or  	 	 多个条件，某一个条件成立，就匹配
逻辑非 ！ 或 not	 取反
> select name,uid from usertab where name="root" and uid=0;

——匹配空
匹配空 字段名 is null
匹配空 字段名 is not null
> select username,uid,git from usertab  where uid is null or git is null ;

——模糊匹配   字段名 like ‘表达式’；
' % ' 表示零个或多个字符
' _ ' 表任意一个字符
> select username from usertab where username like "a%";
> select username from usertab where username like "r__t";

——正则匹配
> 字段名 regexp ‘正则表达式’	^ $ . * [ ]

>select username from usertab where username regexp "^[0-9]";
>select username,uid from usertab where uid regexp "^..$"

——四则运算(select 和 updata 操作时可以做数学计算)
字段类型必须数值类型（整型或浮点型）		+ - * / %
> select username,id,uid from usertab where id<=10;
> ipdate usertab set uid=uid+1 where id <=10;
> select username,uid,gid from usertab where username="mysql";
> select username ,uid,gid,uid+gid as zh from usertab where username="mysql";
> select username,uid,gid ,uid+gid as zh,(uid+gid)/2 as pjz from usertab where username="mysql";
> alter table usertab add age tinyint(2) unsigned default 21 after username;

——聚集函数（对字段的值做统计，字段的类型要求时数值类型）
count（字段名） 统计字段值的个数
sum （字段名） 求和
max（字段名） 输出字段值的最大值
min（字段名） 输出字段值的最小值
avg （字段名） 输出字段值的平均值
> select count(username) from usertab where shell="/bin/bash";

——查询不显示字段重复值 distinct 字段名
> select  distinct shell from usertab;

——查询分组 ???
> sql查询 group by 字段名；
> select shell from usertab where uid >10 group by shell ;

——查询排序（按照数值类型的字段排队）
> sql查询 order by 字段名 asc（默认）|desc；
> select username,uid from usertab where uid > 10 and uid <=100 order by uid desc;

——限制查询显示行数(默认显示所有查询的记录)
> sql查询 limit 数字；（显示查询结果的前几行）
> sql查询 limit 数字1，数字2；（显示查询结果第几行后开始显示几行）
> select * from usertab where limit 3，5;

> select username,uid from usertab where uid > 10 and uid <=100 order by uid desc limit 1;

##################################################################

mysql-day04

1、多表查询
1.1复制表 (Key值不被复制)
> create table 库.表 sql 查询命令
> create table user2 select * from usertab；

1.2复制表结构（复制的内容有sql查询命令决定）
> create table user3 select * from usertab where 1=2(第一行等与第二行 X );

1.3嵌套查询 
——定义：把内层的查询结果作为外层查询的查询条件
> select 字段名列表 from  库.名 条件（ select 字段名列表 from  库.名 条件 ）；
> select username,uid from usertab where uid < (select avg(uid) from usertab);
> select username from db3.usertab where username in (select user from mysql.user where host='localhost');

1.4多表查询
> select 字段名列表 from 表名列表 where 匹配条件；
> select t3.*,t4.uid from t3,t4 where t3.uid=t4.uid;

——迪卡尔集(没意义，所以通常加条件)
> select t3.username,t4.username from t3,t4;

1.5连接查询
——左连接查询（当匹配条件成立时，以左边的表为主显示查询记录）
> select 字段名列表 from 表名A left join 表B on 匹配条件； 
> select * from t6 right join t5 on t6.uid =t5.uid;
> selecc * from t6 left join t5 on t6.uid=t5,uid;
> select t5.username,t6.username from t6 right join t5 on t6.uid = t5.uid ;
> select t5.username,t6.username from t6 left join t5 on t6.uid = t5.uid;

——右连接查询（当匹配条件成立时，以右边的表为主显示查询记录）
> select 字段名列表 from 表名A right join 表B on 匹配条件； 


2、安装数据库图形管理工具 phpmyadmin

2.1管理数据库服务器的方式有：命令行 、 图形（应用程序软件提供的图形界面、 web页面）

2.2在数据库服务器上安装图形管理工具phpMyAdmin
phpMyAdmin-2.11.11-all-languages.tar.gz

——准备软件的运行环境 lamp、lnmp
# rpm -q php-mysql httpd php
# systemctl status httpd

——测试运行环境
#cat /var/www/html/test.php 
<?php
$x=mysql_connect("localhost","root","123456");
if($x){ echo "ok"; }else{ echo "no"; };
?>
# elinks --dump http://127.0.0.1/test.php
OK

——安装软件phpMyAdmin
# tar -xf phpMyAdmin-2.11.11-all-languages.tar.gz  -C /var/www/html/
# cd /var/www/html
# # mv phpMyAdmin-2.11.11-all-languages/ mysql
# cp -p config.sample.inc.php  config.inc.php
# vim config.inc.php
17 $cfg['blowfish_secret'] = 'mysql'; 
31 $cfg['Servers'][$i]['host'] = 'localhost';



——修改软件的配置文件定义管理的数据库服务器



——在客户端访问软件，管理数据库服务器
# firefox 127.0.0.1/mysql


3、用户授权与权限撤销

3.1管理员密码管理
——恢复数据库管理员本机登录的密码
# systemctl stop mysql
# vim /etc/my.cnf
[mysqld]
skip-grant-tables
#validate_password_policy=0
#validate_password_length=6

# systemctl start mysqld
# mysql
> select host,user,authentication_string from mysql.user;
> update mysql.user set authentication_string=password("abc123") where user='root';
> flush privileges;(手动修改配置值，要加)
>quit

# vim /etc/my.cnf
[mysqld]
#skip-grant-tables
validate_password_policy=0
validate_password_length=6
# mysql -uroot -p'abc123'(重置密码成功)

——修改设数据库管理员本机登录的密码(操作)
# mysqladmin -u root -p password 


3.2什么是用户授权
——定义：在数据库服务器上添加连接用户，添加时可以设置用户的访问权限和连接的密码。默认只允许数据库管理员root在本机登录并才有授权权限。

——权限的表示方式
所有权限 			all
其他权限			select，insert，delete,update(字段1，字段2)，。。。
> grant select,update(name) on studb.t8 yaya@"%" identified by "123456";
——数据库的表示方式 
所有库所有表			 *.* 
库的所有表			库.*
库中指定的表			库.表

——用户名的表示方式
连接数据库服务器时使用的名字
授权时自定义，要有标识性
名字存储到mysql库下的user表里

——客户端地址的表示方式
所有地址			%
指定IP地址			192.168.4.254
网段				192.168.4.%
主机名				pc254.tedu.cn（要求数据库服务器可以解析主机名）
域名				%.tedu.cn（要求数据库服务器可以解析主机名）



3.3用户授权命令的语法格式
For example：允许客户端245主机可以使用root连接，连接密码是123456，连接后的访问权限是所有库表完全访问权限，且有授权权限。

> grant 权限列表 on 数据库名 to 用户名@“客户端地址” identified by "密码" 【with grant option】（新增用户是否拥有创建新用户权限）；
> grant all on *.* to root@1"192.168.4.254" identified by "123456" with grant option;
> grant all on *.* to student@"%" identified by "123456" with grant option;
——授权用户不是有授权权限就能授权的，要同时拥有mysql的insert权限才可以，且授权时的权限要小于等于自身的权限

——新增权限给用户
> grant 权限列表 on 库.表 to 用户名@‘客户端地址’；
> grant insert on mysql.* to bbsuer@'%';

——授权用户连接数据库服务器修改自己的登录密码
> set password=password("密码")

——管理员重置授权用户的登录密码
> set password for 用户名@'客户端地址'=password（“密码”）；

——显示连接用户名和IP地址
> select user();
——显示当前登录的主机名
> select @@hostname;
——登录用户的访问权限
> show grants;
——插可能已有用户的权限授权
> show grants for 用户名@"客户端地址" ;
> show grants for admin@"%" ;

3.4撤销用户权限命令的语法格式
——撤销的是用户的访问权限
——用户对数据库有过授权才可以撤销
> revoke 权限列表 on 数库名 from 用户名@“客户端地址”；
> revoke grant option on *.* from 'root'@'192.168.4.254';

——删除用户
> drop  user 'root'@'192.168.4.254';
3.5数据库服务器使用授权库存储授权信息
——虚拟库				indormation_schema 不占用物理存储空间，数机存储在物理内存里，存储表的
——授权库 存储授权信息 		mysql库
——存储授权用户的名及访问权限	user
——存储授权用户对服务器上对库的权限	db 
——存储授权用户对表的访问权限	table_priv 
——存储授权用户对字段的访问权限	clomoun_priv


3.6工作中如何授权
——给管理者授权 给完全权限且有授权权限
——给使用者授权 只给对存储数据的库有select和insert的权限

###############################################################

day05 数据备份与恢复

1、数据备份相关概念
1.1数据备份的目的
——数据被误删除或设备损坏导致数据丢失，时备份文件恢复数据。


1.2数据备份方式
物理备份：指定备份库和表对应的文件
# cp -r /var/lib/mysql /opt/mysql.bak
# chown -R mysql:mysql /opt/mysql.bak

逻辑备份：在执行备份命令时，根据备份的库表及数据生成对应的sql命令，把sql存储到指定的文件里。


1.3数据备份策略
——备份新产生数据（差异备份和增量备份，都备份新产生的数据）
——完全备份: 备份所有数据（一个表、一个库、一台数据库的所有数据）
——差异备份：备份自完全备份后，所有新产生的数据
——增量备份：备份自上次备份后，所有新产生的数据

1.4工作中如何对数据做备份

1.4.1选择备份策略：
——完全备份+差异备份（周一完全，其他差异）
——完全备份+增量备份（周一完全，其他增量）

1.4.2数据备份时间
——数据服务器访问量少的时候执行备份

1.4.3数据备份频率
——根据数据产生量，决定备份频率

1.4.4备份文件的命名
——库名-日期.sql

1.4.5备份文件的储存设置
——准备独立的存储备份文件

1.4.6如何执行备份
——使用周期性计划任务执行本机脚本

2、完全备份与完全恢复
——完全备份的缺点?
	数据量大时，备份和恢复数据都受磁盘I/O
	备份和恢复数据会给表加写锁
	使用完全备份文件恢复数据，只能把数据恢复到备份时的状态。完全备份后新

——完全备份数据命令
# mysqldump -uroot -p密码 数据库名 > 目录名/文件名.sql

——备份和恢复数据会给表加写锁
——数据库名的表达方式
备份一台数据库上的所有数据 	--all-databases 
备份一章表的所有说有数据 	库名 表名
# mysqldump -uroot -p1234566 studdb t3 > studb.sql

备份一个库的所有数据		库名
# mysqldump -uroot -p1234566 studdb > studb.sql
把多个库的所有数据备份到一个文件里	-B 库名1 库名N

——完全恢复数据命令
# mysql -uroot -p密码 数据库名 < 目录名/文件名.sql
# mysql -uroot -p123456 db3 < /mydatabak/db3-user3.sql

——使用source命令恢复数据
> create database bbsdb;
> use bbsdb；
> source /mydatabak/db3-user3.sql；

——编写脚本实现周一自动完全备份
# cat /mysql-bak.sh
#!/bin/bash
day=`date +%F`
if [ ! -d  /dbbak ];then
mkdir /dbbak
fi
mysqldump -uroot -p123456 gamedb > /dbbak/${day}_gamedb.sql

# crontab -e
00 18 * * 1 。/mysql-bak.sh

3、增量备份与增量恢复
3.1启动mysql数据库服务的binlog日志文件，实现实时增量备份
——日志binlog
是mysql数据库服务日志文件的一种，默认没有启用，记录除查询之外的sql命令
查询命令包括 select、show、desc；
写的命令：insert、update、delete、create、drop

——启用binlog日志
# vim /etc/my.cnf
[mysqld]
server_id=51     （数字 1-255 不能于其他人冲突）
log-bin【=目录名/文件名】
binlog-format="mixed"   

# systemctl restart mysqld

——查看binlog日志文件内容
# ls /var/mysql/mysql-bin.000001 (大于500M自动生成000002)
# cat /var/lib/mysql/mysql-bin.index
# mysqlbinlog /var/lib/mysql/mysql51-bin.000001
——自定义binlog日志文件存储的位置和文件名称

# mkdir /mylog
# chown mysql /mylog
# vim /etc/my.cnf
[mysqld]
server_id=51
log-bin=/mylog/mysql  (不写默认mysql根目录)
binlog-format="mixed"

# systemctl restart mysqld
# ls /mylog/mysql.000001



——手动生成新的日志文件方法
*默认日志文件大于500M时自动创建新日志文件
> flush logs;
# mysql -uroot -p123456 -e "flush logs" (-e 在命令行执行数据库命令)
> mysqldump -uroot -p123456 --flush-logs db3  > 目录/xx.sql  (生成新的备份文件)


——删除已有的binlog日志文件
> reset master; (全部初始化)
> purge master logs to "binlog文件名" （删除数字前的）
> purge master logs to "mysql.000005";

——日志文件记录sql命令的方式
记录方式有2种：	
	指定偏移量范围选项 
	--start-position=偏移量 
	--stop-position=偏移量的值

	指定时间范围选项   
	--start-datetime=“yyyy-mm-dd hh:mm:ss” 
	--stop-datetime=“yyyy-mm-dd hh:mm:ss”

读取日志文件指定范围内的sql命令恢复数据

——使用binlog日志恢复数据
# mysqlbinlog [选项] 日志文件名 | mysql -uroot -p123456
# mysqlbinlog mysql.000002 | mysql -uroot -p123456


——查看当前数据库记录sql命令的文件及偏移量
> show master status;

###################################################################################################

3.2安装第三方软件提供热备份命令，对数据做增量备份
——软件介绍 Percona 开源软件 在线热备不锁表,适用于生产环境
——安装软件
# yum  localinstall libev-4.15-1.el6.rf.x86_64.rpm
# yum  install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
# rpm -ql percona-xtrabackup-24

——提供2个备份命令
/usr/bin/innobackupex
集成了命令xtrabackup,所以

/usr/bin/xtrabackup

常用选项
【--host 主机名】
--password 密码
--user 用户名
--databases="库1 库N 库.表" (不指定就备份所有)
--no-timestamp (不生成时间目录)



innobackupex 完全备份与恢复
# innobackupex --user root --password 123456 --databese="mysql performance_schema sys" /allbak  --no-timestamp
——恢复
# rm   -rf  /var/lib/mysql
# mkdir  /var/lib/mysql
# innobackupex  --user root --password 654321  --copy-back  /allbak 
# chown  -R  mysql:mysql  /var/lib/mysql
#  systemctl  restart  mysqld
#mysql   -uroot  -p654321


3.3 innobackupex增量备份

——先要有一次完全备份 存放目录 /fullbak
--incremental 目录名 		增量备份
--incremental-basedir=目录名 	增量

# innobackupex --user root --password 123456 --databases="gamedb mysql performance_schema sys"  /fullbak --no-timestamp

——执行增量备份 存放目录/new1bak
# innobackupex --user root --password 123456 --databases="gamedb mysql performance_schema sys"  --incremental /new1dir --incremental-basedir=/fullbak  --no-timestamp

——执行增量备份 存放目录/new2bak
# innobackupex --user root --password 123456 --databases="gamedb mysql performance_schema sys" --incremental /new2dir --incremental-bsesfir=/new1bak
--no-timestamp

3.4 恢复增量数据
——常用选项
--apply-log 		准备恢复数据
--redo-only			合并日志
--incremental-dir=目录名 	增量恢复数据时，指定备份目录名称
--copy-back 		恢复数据
--export			导出表信息
import			导入表空间


# rm -rf /var/lib/mysql
# mkdir /var/lib/mysql

——准备恢复数据
# innobackupex --user root --password 123456 --databases="gamedb mysql performance_schema sys" --apply-log --redo-only /fullbak

——合并日志（与完全备份合并）
# innobackupex --user root --password 123456 --databaes="gamedb mysql performance_schema sys"   --apply-log --redo-only /fullbak --incremental-dir=/new1dir
# innobackupex --user root --password 123456 --databaes="gamedb mysql performance_schema sys"   --apply-log --redo-only /fullbak --incremental-dir=/new1dir
 
——拷贝备份文件到数据库目录
# innobackupex --user root --password 123456 --databaes="gamedb mysql performance_schema sys" --copy-back /fullbank

——修改文件的所有者/组mysql
# chown -R mysql:mysql /var/lib/mysql

——重启数据库服务
# systemctl restart mysqld

3.5恢复完全备份中的单个表
> create database studb;
> create table studb.a(id char(1));
> create table studb.b(id char(1));

——完全备份
# innobackupex --user root --password 123456 --database="studb" /allbakstudb --no-timestamp

> drop table studb.a;

——按照备份时的表结构创建删除的表
> create table studb.a(id char(1));

——删除创建的信息的表空间文件
> alter table studb.a discard tablespace;

——使用备份文件导出表信息
# innobackupex --user root --password 123456 --databeses="studb" --apply-log --export /allbakstudb

——把导出的表信息文件，拷贝到对应的数据库目录下，并修改所有者和组为mysql
# cp /allbakstudb/studb/a.{cfg,exp,ibd} /var/lib/mysql/studb/
# chown mysql:mysql /var/lib/mysql/studb/a.*

——导入表空间
> alter table studb.a  import tablespace;

# rm -rf /var/lib/mysql/studb/a.cfg
# rm -rf /var/lib/mysql/studb/a.exp

——查看记录
> select * from studb.a;

事物日志文件
LSN 日志序列号

增量备份的工作过程
每一个备份目录下，都有记录备份当前目录备份数据信息的配置文件
# cat 备份目录名/xtrabackup_checkpints(记录备份类型)



###########################################################################

mysql-data06 部署主从同步
1、 mysql主从同步
主：正在被客户端访问的数据库，被称为主库服务器。
从：自动同步主库上的数据库服务器，被称为从库服务器。
2、配置mysql主从同步
2.1 拓扑图
数据库服务器192.168.4.51做主库

数据库服务器192.168.4.52做从库

2.2环境准备
主从同步未配置之前，要保证从库上要有主库上的数据。

2.3配置mysql主从同步
2.3.1配置主库
——做用户授权
> grant replication slave on *.* to repluser@"192.168.4.52" identified by "123456";
——启用binlog日志
vim /etc/my.cnf
[mysqld]
server_id=51
log-bin=master51
binlog-format="mixed"

——查看正在使用binlog日志信息
> show master status;

2.3.2配置从库
——验证主库的用户授权
# mysql -h192.168.4.51 -urepliuser -p123456
——指定server_id
# vim  /etc/my.cnf
[mysqld]
server_id=52

——数据库管理源本地登录，指定主数据库服务器的信息
> change master to 
master_host="主库ip地址"，
master_user="主库授权用户名"，
master_password="主库授权密码"
master_log_file="master51.000001"
master_log_pos=154;
> change master to master_host="192.168.4.51",master_user="repluser", master_passowrd="123456", master_log_file="master51.000001", master_log_pos=154;

——启动slave进程
> start slave;
——查看进程状态信息
> show slave status;
2.4在客户端测试主从同步配置
2.4.1在主库服务器上添加访问数据时，使用连接用户
2.4.2客户端使用主库的授权用户，连接主库服务器，建库表插入记录
2.4.3在从库本机，使用管理登录查看是否有和主库一样库表记录及授权用户
# mysql -uroot -p123456
> select * from 库.表;
2.4.4客户端使用主库的授权用户，连接从库服务器，也可以看到新建的库表及记录



3、mysql主从同步的工作原理
从库数据库目录下的文件：
master.info 记录主库信息
主机名-relay-bin.xxx 中继日志文件，记录主库上执行过的sql命令
主机名-relay-bin.indext 索引文件，记录当前已有的中继日志文件
relay-log.into 中继日志文件，记录当前使用的中继日志信息
——查看当前数据库服务器上正在执行的程序
> show processlist;


从库IO线程和SQL线程的作用
IO线程 把主库binlog日志里的sql命令记录到本机的中继日志文件
SQL线程 执行本机中继日志文件里的sql命令，把数据写进本机。

IO线程报错原因：从库连接主库失败（ping、grant、firewallld、selinux）
		从库指定主库的日志信息错误（日志名 偏移量）
Last_IO_Error:报错信息
修改步骤：
> stop slave;
> change master to 选项=“值”；
> start slave;
SQL线程报错原因：执行本机中继日志文件里的sql命令，用到库或表在本机不存在。

——设置从库暂时不同步，在从库上把slave进程停止
> stop slave;
——把从库恢复成独立的数据库服务器
# rm -rf /var/lib/mysql/master.info
# systmectl restart mysqld
# rm -rf 主机名-relay-bin.xxx 主机名-relay-bin.index relay-log.info

4.mysql主从同步机构模式
一主一从 **
一主多从 **
主从从
主主结构（又称作互为主从）

5、mysql主从同步常用数据参数
——主库服务器在配置文件my.cnf使用的参数
# vim /etc/my.cnf
[mysqld]
binlog_do_db=库名列表   （只允许同步的库）
binlog_Ignore_db=库名列表，库名N   （不允许同步的库）

从库服务器在配置文件my.cnf使用的参数
# vim /etc/my.cnf
[mysqld]
log_slave_updates
relay_log=中继日志文件名
replicate_do_db=库名列表  （只同步的库）
replicate_ignore_db=库名列表  （指不同步的库）

# systemctl restart mysqld

配置mysql主从从结构
主库 192.168.4.51
从库 192.168.4.52 （做51主机从库）
从库 192.168.4.53 （做53主机从库）
要求：客户端访问主库51时创建库表记录在52和53数据库服务器都可以看到

配置步骤：
一、环境准备
主从同步未配置之前


二、配置主从同步
2.1配置主库51
用户授权
> grant replication slave on *.* to yaya@"%" identified by "123456";

启用binlog日志
# vim /etc/my.cnf
[mysqld]
server_id=51
log-bin=db51
binlog-format="mixed"

查看正在使用的日志信息
> show master status;

2.2配置从库52
用户授权
# mysql -uroot -p
>  grant replication slave on *.* to user53@"192.168.4.53" identified by "123456";
启用binlog日志和允许级联复制
# vim /etc/my.cnf
[mysqld]
server_id=52
log-bin=db52
binlog-format="mixed"
log_slave_updates

#systemctl restart mysqld
查看正在使用的日志信息
> show master status;

管理员登录指定主库信息
> change master to master_host="192.168.4.51",master_user="yaya",master_password="123456",master_log_file="db51.000001",master_log_pos=154;

启动slave进程
> start slave;

查看进程状态信息
> show slave status\G;

2.3配置从库53
验证主库的授权用户
# mysql -h192.168.4.52 -uuser53 -p

指定server_id
> change master to master_host="192.168.4.52",master_user="user53",master_password="123456",master_log_file="db52.000001",master_log_pos=154;

管理员

6、mysql主从同步复制模式
6.1 异步复制
——定义：主库在执行完客户端提交的事务后会立即将结果返给客户端，并不关心从库是否已经接收并处理。
——查看是否能动态加载模块
> show variables like "have_dynamic_loading";
——命令行加载插件
主库 > install plugin rpl_semi_sync_master soname 'semisync_master.so';
从库 > install plugin rpl_semi_synv_slave soname 'semisync_slave.so';
——查看系统库下的表，模块是否安装成功
> select plugin_name,plugin_status from information_schema.plugins where plugin_name like '%semi%';

6.2 启用半同步复制
——定义：介于异步复制和全同步复制之间，主库在执行完客户端提交的事务后不是立刻返回给客户端，而是等待至少一个从库接收到并写到relay log中才返回给客户端。

主库 > SET GLOBAL rpl_semi_sync_master_enabled = 1;
从库 > SET GLOBAL rpl_semi_sync_slave_enabled = 1;
查看 > show  variables  like  "rpl_semi_sync_%_enabled";

——配置文件永久启用半同步复制
# vim /etc/my.cnf
主： plugin-load=rpl_semi_sync_master=semisync_master.so rpl_semi_sync_master_enabled=1 

从： plugin-load=rpl_semi_sync_slave=semisync_slave.so rpl_semi_sync_slave_enabled=1 


——主从master和slave需同时启动
plugin-load = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so“

rpl-semi-sync-master-enabled = 1
rpl-semi-sync-slave-enabled = 1


####################################################


mysql-day07 知识点
———— mysql中间件 mysql-proxy maxscale

一、数据读写分离
1.1数据读写分离
	把客户端访问数据时的查询请求和写请求分别给不同的数据库服务器处理
1.2读写分离的意义
	减轻单台数据库服务器的并发访问压力
	提高数据库硬件利用率
1.3时线数据读写分离的方式
——人肉分离：做不同的数据操作时，访问指定的数据库服务器
——使用mysql中间件提供的服务实现：mycat、mysql-proxy、maxscale
1.4使用中间件提供的服务做数据读写分离的缺点
单点故障
当访问量大时，有网络瓶颈

二、配置数据读写分离
2.1拓扑结构
						write | master51
client254--------->代理服务器56--------------------->	}
		  	（maxscale）		 read | slave52
2.2配置数据读写分离
2.2.1配置一主一从，主从同步结构，并在客户端测试配置
2.2.2配置数据读写
——装包maxscale
# yum -y install maxscale-2.1.2-1.rhel.7.x86_64.rpm 
——备份masxcale文件
# cp /etc/maxscale.cnf /etc/maxscale.cnf.bak

——修改配置文件
# vim /etc/maxscale.cnf
  9 [maxscale]	
 *10 threads=auto	（服务器运行后开启线程的线量,auto自动）

（定义数据库服务器,yy一台服务器）
 18 [server1]
 19 type=server
 *20 address=192.168.4.51
 21 port=3306
 22 protocol=MySQLBackend

 *24 [server2]
 *25 type=server
 *26 address=192.168.4.52
 *27 port=3306
 *28 protocol=MySQLBackend

（定义监视的数据库服务器）
 36 [MySQL Monitor]
 37 type=monitor
 38 module=mysqlmon		（监视的模块 自带）
 *39 servers=server1，server2	(监视服务器名称)
 *40 user=scalemon			（监视数据库服务器时连接的用户名）
 *41 passwd=123456			（密码）
 42 monitor_interval=10000	（指定监视的频率）

#############################################################
根据配置文件做相应的设置
> grant replication slave,replication client on *.* to scalemon@"%" identified by "123456";
#############################################################
 (不指定只读服务器 注释)
 *53 #[Read-Only Service]
 *54 #type=service
 *55 #router=readconnroute
 *56 #servers=server1
 *57 #user=myuser
 *58 #passwd=mypwd
 *59 #router_options=slave

 （指定读写分离服务）
 64 [Read-Write Service]
 65 type=service
 66 router=readwritesplit
 *67 servers=server1，server2    (指定读写分离的服务器)
 *68 user=maxscale			（验证连接代理服务账户）
 *69 passwd=123456
 70 max_slave_connections=100%

#############################################################
根据配置文件做相应的设置
> grant select on mysql.* to maxscale@'%' identified by "123456";
#############################################################

 (定义管理服务)
 76 [MaxAdmin Service]
 77 type=service
 78 router=cli
 
 (不指定只读服务使用的端口号)
 *86 #[Read-Only Listener]
 *87 #type=listener
 *88 #service=Read-Only Service
 *89 #protocol=MySQLClient
 *90 #port=4008

 (定义读写分离服务使用的端口号)
 92 [Read-Write Listener]
 93 type=listener
 94 service=Read-Write Service
 95 protocol=MySQLClient
 96 port=4006

 （定义管理服务的端口号）
 98 [MaxAdmin Listener]
 99 type=listener
100 service=MaxAdmin Service
101 protocol=maxscaled
102 socket=default
*103 port=4018       (设置端口 加)

——根据配置文件做相应的设置(在2台数据库服务器上添加用户)
监控数据库服务器时，连接数据库服务器的用户
> grant replication slave,replication client on *.* to scalemon@"%" identified by "123456";

验证访问数据时连接数据服务器使用的用户是否在数据库服务器上存在的连接用户
> grant select on mysql.* to maxscale@'%' identified by "123456";

——启动服务
# maxscale -f /etc/maxscale.cnf

——查看服务进程和端口
# ss -natlp |grep 4018
# ss -natlp |grep 4006

——测试配置
在本机访问管理端口查看监控状态
# maxadmin -P4018 -uadmin -pmariadb
MaxScale> list servers

——在客户端访问数据读写分离服务

################################################################
二、mysql多实例
2.1多实例介绍
在一台物理主机上运行多个数据库服务
——节约运维成本
——提高硬件利用率

2.2配置多实例
主机：在主机192.168.4.56mysql配置多实例：
运行两个数据库服务.第一个 数据库服务 /dataone 数据库目录
					服务端口号；sock文件
					sock日志文件
——第二个数据库服务 数据库目录 /datatow
																																																							
																																																								
——环境准备
——安装提供多实力服务的mysql数据库服务软件
# tar -xf mysql-5.6.30-linux-glibc2.5-x86_64.tar.gz 
# mv mysql-5.6.30-linux-glibc2.5-x86_64 /usr/local/mysql
# echo "export PATH=/usr/local/mysql/bin:$PATH" > /etc/profile
# source /etc/profile

——编辑配置文件/etc/my.cnf
# vim /etc/my.cnf
[mysqld_multi]  						 //启用多实例
mysqld = /usr/local/mysql/bin/mysqld_safe  	 //指定进程文件的路径
mysqladmin = /usr/local/mysql/bin/mysqladmin  	//指定管理命令路径
user = root  						 //指定调用进程的用户

[mysqld1]  					//实例进程名称 ,X表示实例名称,如 [mysql2]
port=3307  		       		 //端口号
datadir=/dataone	     		 //数据库目录 ，要手动创建
socket=/dataone/mysql.sock 		  //指定sock文件的路径和名称
pid-file=/dataone/mysqld.pid   	//进程pid号文件位置
log-error=/dataone/mysqld.log  	//错误日志位置


[mysqld2]  			
port=3308	       		
datadir=/datatwo	     		 
socket=/datatwo/mysql.sock 		 
pid-file=/datatwo/mysqld.pid   	
log-error=/datatwo/mysqld.log  	

——根据配置文件的设置，做相应的配置
创建数据库目录
# mkdir /dataone
# mkdir /datatwo
# chown mysql:mysql /data*

——初始化授权库
# mysqld  --user=mysql  --basedir=软件安装目录 --datadir=数据库目录  –initialize  //初始化授权库
# mysqld --user=mysql --basedir="/usr/local/mysql --datadir="/dataone" --initialize

# mysqld --user=mysql --basedir="/usr/local/mysql --datadir="/datatwo" --initialize

——启动多实力服务
# mysqld_multi   start   实例编号   //启动实例进程
# mysqld_multi start 1

——停止多实例服务
# mysqld_multi --user=root  --password=密码  stop  实例编号    //停止实例进程
# mysqld_multi --user=root --password="123456" stop 1

——访问多实力服务
# mysql -uroot –p初始密码 -S sock文件
# mysql -uroot -p'密码'  -S /dataone/mysqld.sock
> alter user user() identified by '123456';

################################################################

三、mysql调优

































































